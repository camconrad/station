"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./utils/contractUtils.ts":
/*!********************************!*\
  !*** ./utils/contractUtils.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   completeTaskOnContract: function() { return /* binding */ completeTaskOnContract; },\n/* harmony export */   connectWallet: function() { return /* binding */ connectWallet; },\n/* harmony export */   createTaskOnContract: function() { return /* binding */ createTaskOnContract; },\n/* harmony export */   getStationContract: function() { return /* binding */ getStationContract; },\n/* harmony export */   getUSDCContract: function() { return /* binding */ getUSDCContract; },\n/* harmony export */   startTaskOnContract: function() { return /* binding */ startTaskOnContract; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _StationABI_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StationABI.json */ \"./utils/StationABI.json\");\n\n\n// ERC20 ABI for USDC\nconst ERC20_ABI = [\n    \"function balanceOf(address owner) view returns (uint256)\",\n    \"function transfer(address to, uint256 amount) returns (bool)\"\n];\n// Arbitrum constants\nconst STATION_ADDRESS_ARBITRUM = \"0x48DD7500887801bec355ba2cf6aA028E67a41638\";\nconst USDC_ADDRESS_ARBITRUM = \"0xaf88d065e77c8cC2239327C5EDb3A432268e5831\";\n// Skale constants\nconst STATION_ADDRESS_SKALE = \"0xf350c26f76cdbcef6c9a145040f31bfaa7074171\";\nconst USDC_ADDRESS_SKALE = \"0x2aebcdc4F9f9149a50422Fff86198Cb0939Ea165\";\n// Connect to wallet\nconst connectWallet = async ()=>{\n    if (typeof window.ethereum !== \"undefined\") {\n        try {\n            await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            console.log(\"Wallet connected:\", await signer.getAddress());\n            return {\n                provider,\n                signer\n            };\n        } catch (error) {\n            console.error(\"Wallet connection failed:\", error);\n            return null;\n        }\n    } else {\n        console.error(\"MetaMask is not installed\");\n        return null;\n    }\n};\n// Get Station contract instance\nconst getStationContract = (signerOrProvider, network)=>{\n    if (!signerOrProvider) return null;\n    const address = network === \"ARBITRUM\" ? STATION_ADDRESS_ARBITRUM : STATION_ADDRESS_SKALE;\n    return new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.Contract(address, _StationABI_json__WEBPACK_IMPORTED_MODULE_0__, signerOrProvider);\n};\n// Get USDC contract instance\nconst getUSDCContract = (signerOrProvider, network)=>{\n    if (!signerOrProvider) return null;\n    const address = network === \"ARBITRUM\" ? USDC_ADDRESS_ARBITRUM : USDC_ADDRESS_SKALE;\n    return new ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.Contract(address, ERC20_ABI, signerOrProvider);\n};\n// Create task on the contract\nconst createTaskOnContract = async (contract, description, assignee, reward)=>{\n    try {\n        const tx = await contract.createTask(description, assignee, reward);\n        console.log(\"Transaction sent:\", tx.hash);\n        await tx.wait();\n        console.log(\"Task created:\", tx);\n    } catch (error) {\n        console.error(\"Error creating task:\", error);\n        throw error;\n    }\n};\n// Start task on the contract\nconst startTaskOnContract = async (contract, taskId)=>{\n    try {\n        const tx = await contract.startTask(taskId);\n        console.log(\"Transaction sent:\", tx.hash);\n        await tx.wait();\n        console.log(\"Task started:\", tx);\n    } catch (error) {\n        console.error(\"Error starting task:\", error);\n        throw error;\n    }\n};\n// Complete task on the contract\nconst completeTaskOnContract = async (contract, taskId, network)=>{\n    try {\n        // Fetch the task details\n        const task = await contract.tasks(taskId);\n        const rewardAmount = task.reward;\n        console.log(\"Reward amount to transfer:\", ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.formatUnits(rewardAmount, 6));\n        // Get USDC contract instance\n        const usdcContract = getUSDCContract(contract.provider, network);\n        // Check if the USDC contract instance is valid\n        if (!usdcContract) {\n            throw new Error(\"Failed to get USDC contract instance\");\n        }\n        // Check the USDC balance of the contract\n        const balance = await usdcContract.balanceOf(contract.address);\n        console.log(\"Contract USDC balance:\", ethers__WEBPACK_IMPORTED_MODULE_1__.ethers.utils.formatUnits(balance, 6));\n        // Ensure the contract has enough USDC to transfer\n        if (balance.lt(rewardAmount)) {\n            throw new Error(\"Insufficient USDC balance in contract to complete the task\");\n        }\n        // Estimate gas for the transaction\n        const gasEstimate = await contract.estimateGas.completeTask(taskId);\n        // Execute the task completion\n        const tx = await contract.completeTask(taskId, {\n            gasLimit: gasEstimate.add(gasEstimate.div(10))\n        });\n        console.log(\"Transaction sent:\", tx.hash);\n        await tx.wait();\n        console.log(\"Task completed:\", tx);\n    } catch (error) {\n        console.error(\"Error completing task:\", error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/contractUtils.ts\n"));

/***/ })

});